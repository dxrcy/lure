#! -- Provided by runtime --
#!
#! These functions will not be written in Lure, but they will be exposed to
#! `std`, or possibly any module.
#!
#! Only shown here for documentation purposes.

#: int -> never
func exit(code) end

#: string -> never
func panic(message) end

#: any -> string
func typeof(value) end

#: path, int -> int, int
func open(path, mode) end

#: int -> int
func close(file_handle) end

#: int, text -> int
func write(file_handle, text) end

#: int -> int, text
func read(file_handle, length) end

#: int -> int, text
func read_line(file_handle) end

# TODO: idk what to do for files...

#: int
let stdout = 0
#: int
let stdin = 1
#: int
let stderr = 2

#: any -> int
func len(value)
    # Something like:
    match typeof(value)
        case "nil"   then return 0 end
        case "bool"   then return 0 end
        case "number" then return 0 end
        case "char"   then return 1 end
        case "string" then todo() end
        case "table" then
            if value.@len /= nil
                then value.@len()
                else todo()
            end
        end
    end
end

#: any -> string
func to_string(value)
    # Something like:
    match typeof(value)
        case "nil"   then return "nil" end
        case "string" then return value end
        case "char"   then todo() end
        case "number" then todo() end
        case "bool" then
            if value 
                then return "true"
                else return "false"
            end
        end
        case "table" then
            if value.@to_string /= nil
                then value.@to_string()
                else todo() # Something like `<type@line>`
            end
        end
    end
end

# Used by the `+` operator
#: a, a -> a
func add(value, other) end

