func main(args)
    println("=== HANGMAN ===")

    if len(args) < 1 then
        println("Please provide a file path.")
        return 1
    end
    filename = args[1]

    words = read_file_lines(filename)
    if words == nil then
        println("Failed to read file.")
        return 2
    end

    println("\n\n\n\n\n")

    while true do
        index = math.random_int(0, len(words))
        word = words[index]

        correct = as Set {}
        incorrect = as Set {}

        while true do
            for .. in 0 to 5 do
                print("\x1b[A\x1b[K")
            end

            visible = ""
            is_win = true
            for ch in word do
                if correct.contains(ch) then
                    visible = visible : ch
                else
                    visible = visible : '_'
                    is_win = false
                end
            end

            if is_win then
                println("---------")
                println("You win! :)")
                println("The word was: '%'\n", word)
                println("---------")
                io.read_line()
                break
            elif len(incorrect) >= 6 then
                println("---------")
                println("You lose! :(")
                println("The word was: '%'\n", word)
                println("---------")
                io.read_line()
                break
            end

            println(visible)
            println("Chances: %\n", 6 - len(incorrect))
            println("Correct: %", correct)
            println("Inorrect: %", incorrect)
            print("Guess: ")

            line = io.read_line()
            if len(line) < 1 then
                continue
            end

            guess = line[0]
            if word.contains(guess) then
                correct.add(guess)
            else
                incorrect.add(guess)
            end
        end
    end
end

#: string -> { string } | nil
func read_file_lines(filename)
    result = File.open(filename, "r")
    file = result.ok
    if result.err != nil then
        return nil
    end

    lines = {}
    while true do
        err, line = file.read_line()
        if err != nil then
            return nil
        end
        if len(line) < 1 then
            break
        end
        lines.push(line)
    end

    file.close()
    return lines
end

Set = {
    #: { char = bool }
    items = {}

    #: Set, char -> void
    func add(self, item)
        if not self.contains(item) then
            self.items[item] = true
        end
    end

    #: Set, char -> bool
    func contains(self, item)
        return self.items[item] == true
    end

    #: Set -> string
    func @to_string(self)
        output = ""
        for item in self.items do
            if len(output) > 0 then
                output = output : ", "
            end
            output = output : item
        end
        return output
    end
}

