#! Some library module example

# (These are also redudant)
assert = core.util.assert
is_int = core.util.is_int

#: a int, b int -> int
func add(a, b)
    return a + (b)
end

table = {
    key = "value"
    # Maybe this will be supported ??
    # nested.key = "value"
}

PI = core.math.PI

_fib_memory = {}

# Alternate function definition
# `func(...) ... end` is an expression

#: int -> int
fib = func(n)
    # panics if not met
    assert(is_int(n) and n >= 0)

    if n < 2 then
        return n
    end

    if n < len(_fib_memory) then
        return _fib_memory[n]
    end

    result = fib(n - 1) + fib(n - 2)
    _fib_memory[n] = result
    return result
end

#: { a }, func(a -> b) -> { b }
func map(table, fun)
    for key = value in table do
        table[key] = fun(value)
    end
    return table
end

a = {
    -2
    -3
}

# Metatables TODO: Choose a better name
#
# Similar to Lua metatables (I think)
#
# Metatables should just PascalCase

## A person
Person = {
    # Default values are required for all fields
    #: string
    name = ""
    #: int
    age = 0
    #: bool
    is_alive = true

    # Methods

    # `self` is not a keyword, it is just a normal parameter.

    ## Get the name
    #: Person -> string
    func get_name(self)
        return self.name
    end

    # `@` signifies an 'overridden' method, kinda...
    # It is exactly the same as a normal method, but implies that other
    # modules/functions may expect it to exist (such as `core.format` in this
    # case)
    # Similar to `__tostring` in Lua (I think)
    # Documentation or type comments cannot be inferred, because a generic
    # `@to_string` method is not defined anywhere. Though doc comments probably
    # are not necessary here.

    #: Person -> string
    func @to_string(self)
        return format("% is % years old", self.name, self.age)
    end
}

# Metatables are just tables
# Other tables can 'inherit' values (including methods)

Vector = {
    #: int
    x = 0
    #: int
    y = 0

    #: int, int -> Vector
    func new(x, y)
        return as Vector {
            x = x
            y = y
        }
    end

    #: Vector, Vector -> int
    func dot(self, other)
        return self.x * other.x + self.y * other.y
    end

    #: Vector, Vector -> Vector
    func @add(self, other)
        # This syntax is similar to Lua's `setmetatable` function
        return as Vector {
            x = self.x + other.x
            y = self.y + other.y
        }
    end

    #: Vector -> string
    func @to_string(self)
        return format("(%, %)", self.x, self.y)
    end
}

func vector_example()
    # Using helper method
    a = Vector.new(3, 4)
    # Manually setting metatable
    b = as Vector { 5 6 }

    print(a + b) # (8, 10)

    # Use `:` to pass the object as the `self` parameter
    a:dot(b)
    # ^ This is equivalent to:
    a.add(a, b)
    # (alternatively)
    Vector.add(a, b)
end

