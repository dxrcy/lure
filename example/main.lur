#!/bin/lure

# A file is a table and a module
# Only assignments can occur
# Procedural logic must happen in functions
# `main` will get called automatically, for the entrypoint file

#( This is a block comment
    A file is a module
    A module contains statements
    A statement can be:
    - function
    - variable declaration
    - assignment operation
    - loop / conditional
    - expression (incl. function call)
)#

# Tables are passed by reference, primatives are passed by value
# Functions are passed by reference, but are not modifiable anyway

# NO statements/functions are hoisted

# idk should functions be able to return multiple values ? 
# not in a table-destructuring way, but like lua.

# This item is an item in the module table (and accessible to the current scope)
x = 1
# This item is accessible to the current scope (and child scopes), it is not
# added to the module table
use y = 2
# ^ Maybe use `with` instead of `use`

# Implicit imports for every file/module
use core = require("@core") # Or "core"
use math = core.math
use print = core.prelude.print
use println = core.prelude.println
# and so forth...

# Import a module
# Executes module when `require` expression is run
# This will run any module-level statements
use lib = require("lib")
use add = lib.add

func main()
    for i in 0 to 10 do
        println("%: %\n", i, list[i])
    end
    for i = .. in list do
        println("%\n", i) # 0, 1, 2
    end

    println("Hello World")

    # All variables and items are scoped by block

    x = 2
    x = x + 3 # Arithmetic assignment operators (eg. `+=`) are NOT supported
    log(x) # Debug log function from `core`

    # No such thing as 'redeclarations' (except using type comments I suppose)
    # 'Shadowing' is not a thing. It is just a redefinition
    x = 4

    if x > 3 then
        println("> 3")
    elif x == 2 then
        println("== 2")
    else
        println("<= 3")
    end
    # (Alternative formatting)
    if x > 3
        then println("> 3")
        else println("<= 3")
    end

    # Hopefully this can work
    y = if x > 3
        then 4
        else 6
    end

    # LValues
    a
    a.b.c
    a[0]
    a.b[0]
    a[0].b
    # TODO: Support these lvalue syntaxes
    # (a).b
    # (a.b).c
    # (a)[0]
    # (a[0]).b
    # (a.b)[0]
    # a.(b[0]) # INVALID
    a[b[0]]  # do this instead

    s = "abc"
    log(s)
    s2 = s | "def" # Concatenation operator is undecided (cannot be `..`)
    log(s, s2)

    # Tables NEVER use commas in between values
    list = { 4 5 6 }
    log(len(list))

    # Simple range for-loop
    # Note that the `to` keyword is specific to for loops. It does NOT create a
    # 'range' or 'iterator' object
    for i in 0 to 10 do # Always inclusive to exclusive
        log(i) # 0, 1, ... 9
    end
    for .. in 0 to 10 do # Ignore value
        log("?") # ?, ?, ... ?
    end
    for i in 0 to len(list) do
        println("%: %\n", i, list[i])
    end

    # Maybe use different syntax for key/value binding
    # Shouldn't use `i: value` unfortunately. Not consistent with dict literals
    # Maybe `i, item`
    for value in list do
        println("%\n", value) # 4, 5, 6
    end
    for i = value in list do
        println("%: %\n", i, value) # 0: 4, 1: 5, 2: 6
    end
    for i = .. in list do
        println("%\n", i) # 0, 1, 2
    end
    # ^ `..` is used to ignore a value
    # Alternatively, underscore could be used
    # `.. = value` is invalid. Use simply `value`

    dict = {
        a = 7
        b = 8
    }

    for value in dict do
        println("%\n", value) # 7, 8
    end
    for key = value in dict do
        println("%: %\n", key, value) # a: 7, b: 8
    end
    for key = .. in dict do
        println("%\n", value) # a, b
    end

    mixed = {
        4       # Implicitly `0 = 4`
        a = 5
        # if `6` was here it would be implicitly `1 = 6`
        # (1 is the lowest non-negative integer not already used as a key)
    }

    for value in mixed do
        println("%\n", value) # 4, 5
    end
    for key = value in mixed do
        println("%: %\n", key, value) # 0: 4, a: 5
    end
    for key = .. in mixed do
        println("%\n", key) # 0, a
    end

    a = 0
    while a < 10 do
        log(a)
        a = a + 1
    end

    a = 0
    while a do
        log(a)
        a = a + 1
        if a > 10 then
            break
        end
    end

    log(add(5, 6))
    log(lib.add(5, 6))

    log(lib.PI)

    john = as lib.Person {
        name = "John"
        age = 30
    }

    assert(type_of(nil),   "nil")
    assert(type_of(true),  "bool")
    assert(type_of(4),     "number")
    assert(type_of(4.5),   "number")
    # assert(type_of('f'),   "char")
    assert(type_of("foo"), "string")
    assert(type_of(list),  "table")
    assert(type_of(dict),  "table")
    assert(type_of(mixed), "table")
    assert(type_of(john),  "table")
    # Metatables and modules are tables
    assert(type_of(lib.Person), "table")
    assert(type_of(lib), "table")

    # Indexing and slicing
    # Works the same for strings and lists
    a = "abcdef"
    assert(a[0], "a")
    assert(a[-1], "f")
    assert(a[1, 2], "ab")
    assert(a[0, -1], "abcdef")
    assert(a[1, -1], "bcdef")
    assert(a[0, -2], "abcde")
    # Syntax sugar for call to core method implementations
    assert(a[0], a.get(0, nil))
    assert(a[-1], a.get(-1, nil))
    assert(a[1, 2], a.slice(1, 2))
    assert(a[0, -1], a.slice(0, -1))
    a[0] = "A"
    a.set(0, "A")
    a[0, 1] = "AB" # Parsing error: Not an LValue
    # Panic if type is not table or string
    n = 123
    n[0]
    n[0, 3]
    n[0] = 5
    n.get(0)
    n.slice(0, 3)
    n.set(0, 5)
    # Named table access
    b = { a = 1 b = 2 }
    assert(b.a, 1)
    assert(b.b, 2)
    assert(b["a"], 1)
    assert(b[0], nil)
    assert(b[0, 1], nil)

    # Spread operator
    jane = { name = "Jane" ..john }
    # ^Equivalent to this:
    jane = { name = "Jane" }
    for key = value in john do
        if jane[key] == nil then
            jane[key] = value
        end
    end

    # Match/switch statements are not supported

    x = 3
    # As a statement
    if x == 4 then
        println("4")
    elif x == 5 then
        println("5")
        println("it is five")
    else
        println("default")
    end

    # Comparing to a table
    # Must check each key individually
    if john.name == "John" then
        println("Hello John")
    else
        # john.name
        println("Who are you")
    end

    # Default implementation of `@eq` checks each key/value RECURSIVELY!
    # Works, but probably not what u want
    # This can be 'overridden' by the table/metatable
    if john == john then
    end

    # Same as dict==dict comparison above
    a = { 2 3 4 }
    if a == a then
    end
end

