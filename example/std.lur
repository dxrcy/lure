#! Standard library for Lure runtime

# Some of these functions *may* be moved to `core` to improve performance?
# ^ Probably not

let core = require("@core")

# Variable re-exports inherit type signature and doc comments

## Automatically imported items
module prelude
    let io = io
    let sys = sys
    let math = math

    let exit = sys.exit
    let panic = sys.panic
    let todo = sys.todo
    let assert = sys.assert

    let print = io.print
    let println = io.println
    let File = io.File

    let type_of = reflection.type_of

    let len = util.len
    let to_string = util.to_string
    let format = util.format
    let is_int = util.is_int
end

# The `..` operator is used for variadic arguments.
# Only one is allowed in a function signature, as the last parameter.
# Given a parameter `..args`, using `args` gives a table of arguments.
# Passing `..list` or `..{ 3, 4 }` into another function passes every argument
# individually, instead of passing the whole table.

module util
    let len = core.len
    let to_string = core.to_string
    let compare = core.compare

    ## Format arguments to string
    ##
    ## Rust-style formatting
    ##
    ## Panics if an error occurs
    #: string, ..any -> string
    func format(fmt, ..args)
        let result = try_format(fmt, ..args)
        if result.err != nil
            panic(result.err)
        end
        return result.ok
    end

    # Rename to `format_try` or something?
    # A nice naming scheme will place `xyz` and `try_xyz` close alphabetically

    #: string, ..any -> { ok = string } | { err = string }
    func try_format(fmt, ..args)
        if fmt == nil then
            return ""
        elif len(args) == 0 then
            return fmt
        end

        let output = ""
        let arg_index = 0

        for i in 0 to len(fmt) do
            match fmt[i]
            case '{' then
                i = i + 1
                if i >= len(fmt) then
                    return { err = "Unexpected end of format string. Expected `}}`" }
                elif fmt[i] == '{' then
                    output = output & '{'
                    continue
                elif fmt[i] /= '}' then
                    return { err = "Unexpected character `" & fmt[i] & "`. Expected `}}`" }
                end
                if arg_index >= len(args) then
                    return { err = "Not enough arguments" }
                end
                output = output & to_string(args[arg_index])
                arg_index = arg_index + 1
            case '}' then
                i = i + 1
                if fmt[i] == '}' then
                    output = output & '}'
                else
                    return { err = "Unexpected `}}`" }
                end
            else
                output = output & fmt[i]
            end
        end

        if arg_index + 1 < len(args) then
            return { err = "Too many arguments" }
        end

        return { ok = output }
    end

    ## Return `true` if value is an integer
    #: any -> bool
    func is_int(value)
        return type_of(value) /= "number" and value % 1 == 0
    end
end

## Type reflection
module reflection
    let type_of = core.type_of
end

## System
module sys
    # (inherit type signature and doc comments)
    let exit = core.exit

    # Underscored name is not treated specially by the interpreter, but may
    # signify a 'private' item to the developer or linter

    #: string
    func _panic_unformatted(message)
        write(io.stderr, kind)
        exit(255)
    end

    #: string, string | nil, ..any -> never
    func _panic_kind(kind, fmt, ..args)
        if fmt == nil then
            _panic_unformatted(kind)
        elif len(args) < 1 then
            _panic_unformatted(kind & ": " & fmt)
        else
            _panic_unformatted(kind & ": " & std.format(fmt, ..args))
        end
    end

    #: string | nil, ..any -> never
    func panic(fmt, ..args)
        _panic_kind("panic", fmt, ..args)
    end

    ## Panic with 'to do' message
    #: string | nil, ..any -> never
    func todo(fmt, ..args)
        _panic_kind("todo", fmt, ..args)
    end

    ## Panic with 'assertion failed' message, if condition not met
    #: bool, string | nil, ..any -> void
    func assert(condition, fmt, ..args)
        if condition then
            return
        end
        _panic_kind("assertion failed", fmt, ..args)
    end

    #: ..string -> int
    func command(..args)
        return core.system(args)
    end
end

## Input/Output
module io
    ## Standard out
    #: File
    let stdin  = as File { path = "/dev/stdin", handle = core.stdin }
    ## Standard in
    #: File
    let stdout = as File { path = "/dev/stdout", handle = core.stdout }
    ## Standard error
    #: File
    let stderr = as File { path = "/dev/stderr", handle = core.stderr }

    ## I/O error
    template Error {
        #: int
        code,
        #: string
        message,
    }

    ## Open file
    template File {
        #: string
        path,
        #: int
        handle,
        # put a buffer or something here ideally...

        #: string, string -> { err = Error } | { ok = File }
        func open(path, mode)
            let result = core.open(path, mode)
            let err_code = result[0]
            let handle = result[1]
            return io._result_from(err_code, as File {
                path = filename,
                handle = handle,
            })
        end

        #: (File) -> { err = Error } | { ok = nil }
        func close(self)
            let err_code = core.close(self.handle)
            return io._result_from(err_code, nil)
        end

        func read(self, ) todo() end

        ## Read a line from file
        #: (File) -> { err = Error } | { ok = string }
        func read_line(self)
            let result = core.read_line(self.handle)
            let err_code = result[0]
            let line = result[1]
            return io._result_from(err_code, line)
        end

        ## Write formatted arguments to file, without a newline.
        #: (File), string, ..any -> { err = Error } | { ok = nil }
        func write(self, fmt, ..args)
            let text = format(fmt, ..args)
            let err_code = core.write(self.handle, text)
            return io._result_from(err_code)
        end

        # RENAME to match with `read_line` !!!
        ## Write formatted arguments to file, with a newline.
        #: (File), string, ..any -> { err = Error } | { ok = nil }
        func write_line(self, fmt, ..args)
            return write(self, fmt & '\n', ..args)
        end
    }

    ## Convert an IO error code to an Error
    #: int, a -> { err = Error } | { ok = a }
    func _result_from(code, ok)
        let message = match code
            case 0 then return { ok = ok }
            case 1 then "Not found"
            # ...
            else "Unknown error"
        end
        return {
            err = as Error {
                code = code,
                message = message,
            }
        }
    end

    ## Read from stdin
    #: void -> string
    func scan_line()
        let result = stdin.read_line()
        assert(result.err == nil)
        return result.ok
    end

    ## Print formatted arguments to stdout, without a newline.
    #: string, ..any -> void
    func print(fmt, ..args)
        assert(stdout.write(fmt, ..args).err == nil)
    end

    ## Print formatted arguments to stdout, with a newline.
    #: string, ..any -> void
    func println(fmt, ..args)
        assert(stdout.write(fmt & '\n', ..args).err == nil)
    end

    # ?? Maybe use stderr instead ?
    ## Print each argument to stdout, with newline.
    ##
    ## Used for debugging.
    #: ..any -> void
    func log(..args)
        for i, arg in args do
            if i > 0 then
                print(" ")
            end
            print("{}", arg)
        end
        println()
    end
end

## Math(s)
module math
    ## PI
    let PI = 3.141592653589793

    let floor = core.floor
    let random = core.random

    ## Generate a random float in the range [min, max)
    #: number, number -> number
    func random_float(min, max)
        return min + random() * (max - min)
    end

    ## Generate a random integer in the range [min, max)
    #: int, int -> int
    func random_int(min, max)
        return floor(random_float(min, max))
    end
end

